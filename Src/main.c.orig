/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "can.h"
#include "dma.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "dianji.h"
#include "key.h"
#include "ztjs.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int fputc(int ch, FILE *f)
{
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xffff);
    return ch;
}
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
void running(void);
void test(void);
void pattern(void);
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
uint8_t data[8] = {0}; // 参数命令数组
uint8_t key = 0;
int Origin_qc4, Origin_qc5, Origin_qc6;
int x, y, z, fl = 100, gravity1 = 400, gravity2 = 410, gravity3 = 300, rst = 0, flag = 1, status = 0;
long Origin_qc1, Origin_qc2, Origin_qc3, electricity1, electricity2, electricity3; //两次编码器差值计算
unsigned char len = 0;
long  dif_qc1 = 0, dif_qc2 = 0, dif_qc3 = 0;
//float real_angle1 = 0, real_angle2 = 0, real_angle3 = 0, dif_angle1 = 0, dif_angle2 = 0, dif_angle3 = 0; //推导真实编码器角度
long real_angle1 = 0, real_angle2 = 0, real_angle3 = 0, dif_angle1 = 0, dif_angle2 = 0, dif_angle3 = 0, angle1 = 0, angle2 = 0, angle3 = 0; //推导真实编码器角度
long rst_qc1, rst_qc2, rst_qc3; //复位编码器qc
double  man[7];
unsigned char flag_tp = 1;
unsigned char mode;
unsigned char flag_tx;
uint32_t ID = 0;
uint16_t encoder_4 = 0, encoder_5 = 0, encoder_6 = 0;
uint16_t angle_4, angle_5, angle_6;
uint8_t Rxd_Data[8];//can中断接收数组（全局变量）
//unsigned char falg_m1;
//unsigned char falg_m2;
//unsigned char falg_m3;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    if(htim->Instance == TIM3)//1s
    {
        test();
        HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
    }
    if(htim->Instance == TIM4)//20ms
    {

        running();
        //HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
    }
    if(htim->Instance == TIM6)//10ms
    {
        flag_tx = !flag_tx;
        if(flag_tx)//无法同时接收三个数据，只能两个两个发
        {
            //Read_Temp_Electricity_Speed_encoder(4);
            // Read_Temp_Electricity_Speed_encoder(5);
            Read_Angle_Cmd(4);
            Read_Angle_Cmd(5);
        }
        else
        {
            Read_Angle_Cmd(5);
            Read_Angle_Cmd(6);
            // Read_Temp_Electricity_Speed_encoder(5);
            //Read_Temp_Electricity_Speed_encoder(6);
        }
    }
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */


    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();

    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();

    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
    MX_DMA_Init();
    MX_CAN_Init();
    MX_USART1_UART_Init();
    MX_TIM3_Init();
    MX_TIM4_Init();
    MX_TIM6_Init();
    /* USER CODE BEGIN 2 */
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
    printf("-----------------设备初始化中-----------\n");
    HAL_CAN_Start(&hcan);
    CAN1_Config(); //设置滤波
    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING );	// Enable interrupts
    printf("-----------------CAN通信初始化成功-----------\n");
//    HAL_TIM_Base_Start_IT(&htim3);
//    printf("-----------------定时器3初始化成功-----------\n");
    //HAL_TIM_Base_Start_IT(&htim2);
    //printf("-----------------设备初始化中2-----------\n");
    CAN_RoboModule_DRV_Reset(0, 0);                     //对0组所有驱动器进行复位
    HAL_Delay(500);                                      //发送复位指令后的延时必须要有，等待驱动器再次初始化完成
    CAN_RoboModule_DRV_Config(0, 1, 15, 0);            //1号驱动器配置为15ms传回一次数据
    HAL_Delay(200);                                      //此处延时为了不让传回数据时候4个不一起传
    CAN_RoboModule_DRV_Config(0, 2, 15, 0);            //2号驱动器配置为15ms传回一次数据
    HAL_Delay(200);                                      //此处延时为了不让传回数据时候4个不一起传
    CAN_RoboModule_DRV_Config(0, 3, 15, 0);            //3号驱动器配置为15ms传回一次数据
    CAN_RoboModule_DRV_Mode_Choice(0, 0, Current_Position_Mode); //0组的所有驱动器 都进入电流位置模式
    HAL_Delay(500);                                      //发送模式选择指令后，要等待驱动器进入模式就绪。所以延时也不可以去掉。
    /*********************************************+*************************************/
//    Origin_qc1 = Real_Position_Value[0]; //记录初始位置
//    Origin_qc2 = Real_Position_Value[1];
//    Origin_qc3 = Real_Position_Value[2];
//    rst_qc1 = 2620 - Origin_qc1;
//    rst_qc2 = 2620 - Origin_qc2;
//    rst_qc3 = 2420 - Origin_qc3;
    //HAL_Delay(1000);
    //uint8_t i;
    printf("-----------------设备调平中-----------\n");
		 Close_Clear_Cmd(4); 
    Close_Clear_Cmd(5);
    Close_Clear_Cmd(6);
//		 Close_Clear_Cmd(4);
//		 HAL_Delay(10);
//    Close_Clear_Cmd(5);
//		 HAL_Delay(10);
//    Close_Clear_Cmd(6);
//		 HAL_Delay(10);
    /* USER CODE END 2 */


    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while(flag_tp)
    {
//        unsigned char flag_zs1;
//        unsigned char flag_zs2;
//        unsigned char flag_zs3;
        for(int i = 0; i < 6000; i += 10)
        {
//					  if(electricity1>2500)//如果堵转电流超过2500
//						{
//							CAN_RoboModule_DRV_Current_Position_Mode(0,1,2000,-i);
//						}
//						else
//						{
//							CAN_RoboModule_DRV_Current_Position_Mode(0,1,2000,i);
//						}

            if(M_Z_1 != 0)CAN_RoboModule_DRV_Current_Position_Mode(0, 1, 2000, i);
            if(M_Z_2 != 0)CAN_RoboModule_DRV_Current_Position_Mode(0, 2, 2000, i);
            if(M_Z_3 != 0)CAN_RoboModule_DRV_Current_Position_Mode(0, 3, 2000, i);

            Origin_qc1 = Real_Position_Value[0]; //记录初始位置
            Origin_qc2 = Real_Position_Value[1];
            Origin_qc3 = Real_Position_Value[2];
            electricity1 = Real_Current_Value[0];
            electricity2 = Real_Current_Value[1];
            electricity3 = Real_Current_Value[2];
            printf("一号码值:%ld  一号电流:%ld  二号码值:%ld  二号电流:%ld  三号码值:%ld  三号电流:%ld  \r\n", Origin_qc1, electricity1, Origin_qc2, electricity2, Origin_qc3, electricity3);
//            printf("一号电流:%ld  二号电流:%ld  三号电流:%ld  \r\n",electricity1,electricity2,electricity3);
            if(M_Z_1 == 0 && M_Z_2 == 0 && M_Z_3 == 0)
            {
//                Origin_qc1 = Real_Position_Value[0]; //记录初始位置
//                Origin_qc2 = Real_Position_Value[1];
//                Origin_qc3 = Real_Position_Value[2];
                flag_tp = 0;
                break;
            }
        }
        HAL_TIM_Base_Start_IT(&htim6);
        printf("-----------------定时器6初始化成功-----------\n");
        HAL_Delay(1000);
        Origin_qc1 = Real_Position_Value[0]; //记录初始位置
        Origin_qc2 = Real_Position_Value[1];
        Origin_qc3 = Real_Position_Value[2];
        Origin_qc4 = angle_4; //记录456初始位置
        Origin_qc5 = angle_5;
        Origin_qc6 = angle_6;

    }

  
	


    HAL_Delay(1000);
    printf("-----------------456电机调平中-----------\n");
//		WeiZhi_Contrl(4,0x00, 100, 31596);
//		HAL_Delay(1000);
//		WeiZhi_Contrl(5,0x00, 50, 19540);
//		HAL_Delay(1000);
//		WeiZhi_Contrl(6,0x00, 100, 22300);
//		HAL_Delay(1000);
    printf("-----------------456电机调平成功-----------\n");


    HAL_TIM_Base_Start_IT(&htim4);
    printf("-----------------定时器4初始化成功-----------\n");
    HAL_TIM_Base_Start_IT(&htim3);
    printf("-----------------定时器3初始化成功-----------\n");

    printf("-----------------设备初始化成功-----------\n");
//    Real_Position_Value[0]=Origin_qc1; //记录初始位置
//    Real_Position_Value[1]=Origin_qc2;
//    Real_Position_Value[2]=Origin_qc3;

    while (1)
    {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        run();
        map();
        pattern();
        //Close_Clear_Cmd(5);
        //Run_Cmd(5);
        //Speed_Contrl(5,100000);
        //WeiZhi_Contrl(5,0x00, 100, 0);
        //      WeiZhi_Contrl(4,0x00, 100, 0);
//			WeiZhi_Contrl(5,0x00, 100, 0);
//			WeiZhi_Contrl(6,0x00, 100, 0);

//			WeiZhi_Contrl(4,0x00, 20Read_Temp_Electricity_Speed_encoder(4);0, 0);
//			WeiZhi_Contrl(5,0x00, 200, 0);
//			WeiZhi_Contrl(6,0x00, 200, 0);
//			printf("角度\n");
//			Read_Angle_Cmd(4);
//			HAL_Delay(1000);
//			        for(i = 0; i < 8; i++)
//        {
//            printf("Rxd_Data[%d]=%u\r\n", i, Rxd_Data[i]);
//        }
//			//Read_Temp_Electricity_Speed_encoder(5);
//				HAL_Delay(1000);
//			HAL_Delay(1000);
//			Read_Angle_Cmd(6);
//			HAL_Delay(1000);
        key = KEY_Scan(0);				//得到键值
//				 WeiZhi_Contrl(4, 0x00, 100, Origin_qc4);
//        WeiZhi_Contrl(5, 0x00, 100, Origin_qc5);
//        WeiZhi_Contrl(6, 0x00, 100, Origin_qc6);
        switch(key)
        {
        case KEY0_PRES:
            flag = !flag;
            mode = 1;
            //HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,GPIO_PIN_RESET);
            HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
            break;
        case KEY1_PRES:

//            while(!KEY1);
//					HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);//使能中断
//				HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING );	// Enable interrupts
//__disable_irq(); //关闭所有中断

            angle1 = Real_Position_Value[0] ;
            angle2 = Real_Position_Value[1] ;
            angle3 = Real_Position_Value[2] ;
//__enable_irq();//打开所有中断
//        CAN_RoboModule_DRV_Current_Position_Mode(0, 1, 5000, Real_Position_Value[0]);
//        CAN_RoboModule_DRV_Current_Position_Mode(0, 2, 5000, Real_Position_Value[1]);
//        CAN_RoboModule_DRV_Current_Position_Mode(0, 3, 5000, Real_Position_Value[2]);
//				        angle1 = Real_Position_Value[0] ;
//                angle2 = Real_Position_Value[1] ;
//                angle3 = Real_Position_Value[2] ;
            mode = 2;
//				LED1=!LED1;
            break;
        case WKUP_PRES:
            mode = 3;
//            zero_m1 = Real_Position_Value[0] ;
//            zero_m2 = Real_Position_Value[1] ;
//            zero_m3 = Real_Position_Value[2] ;
//				LED0=!LED0;
//				LED1=!LED1;
            break;
        }

        zitaijiesuan((angle_6 - Origin_qc6) / 100, (angle_5 - Origin_qc5) / 100, (angle_4 - Origin_qc4) / 100);
    }
    /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    /** Initializes the CPU, AHB and APB busses clocks
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
    {
        Error_Handler();
    }
    /** Initializes the CPU, AHB and APB busses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
    {
        Error_Handler();
    }
}

/* USER CODE BEGIN 4 */
void test()
{
    if(flag == 1 && printf("测试模式！\n")) //默认为测试模式，用串口查看数值，调试阶段
    {
//得到差值并保存
        dif_qc1 = Real_Position_Value[0] - Origin_qc1;
        //Origin_qc1=Real_Position_Value[0];
        dif_qc2 = Real_Position_Value[1] - Origin_qc2;
        //Origin_qc2= Real_Position_Value[1];
        dif_qc3 = Real_Position_Value[2] - Origin_qc3;
        //Origin_qc3= Real_Position_Value[2];
//得到真实角度差
        dif_angle1 = dif_qc1 * 0.045;
        dif_angle2 = dif_qc2 * 0.045;
        dif_angle3 = dif_qc3 * 0.045;
//计算真实角度
        real_angle1 = dif_angle1;
        real_angle2 = dif_angle2;
        real_angle3 = dif_angle3;

        electricity1 = Real_Current_Value[0];
        electricity2 = Real_Current_Value[1];
        electricity3 = Real_Current_Value[2];

        delta_calcForward(real_angle1 / 13.3 + 31.4, real_angle2 / 13.3 + 31.4, real_angle3 / 13.3 + 31.4);
        //delta_calcForward(Origin_angle1,Origin_angle2,Origin_angle3);//正解
        printf("-转动qc值-   一号：%ld(qc)    二号：%ld(qc)    三号：%ld(qc)\n", Real_Position_Value[0], Real_Position_Value[1], Real_Position_Value[2]);
        printf("-真实角度-   一号：%ld(angle) 二号：%ld(angle) 三号：%ld(angle)\n", real_angle1, real_angle2, real_angle3);
        printf("-转动速度-   一号：%d(rpm)    二号：%d(rpm)    三号：%d(rpm)\n", Real_Velocity_Value[0], Real_Velocity_Value[1], Real_Velocity_Value[2]);
        printf("-结算位置-   手腕中心点：x=%f y=%f z=%f\n", PM.x0 + X, PM.y0 -Y, -PM.z0 + Z);
        printf("一号电流:%ld  二号电流:%ld  三号电流:%ld  \r\n", electricity1, electricity2, electricity3);
        //printf("encoder_4:%ld encoder_5:%ld encoder_6:%ld \r\n", encoder_4,encoder_5,encoder_6);
        printf("四号角度:%ld  五号角度:%ld  六号角度:%ld  \r\n", angle_4, angle_5, angle_6);
//        HAL_Delay(1000);
    }
}
void running()
{
    if(flag == 0)  //按key_0切换为运行模式，将数值传至上位机，运行阶段
    {

//得到差值并保存
        dif_qc1 = Real_Position_Value[0] - Origin_qc1;
        //Origin_qc1=Real_Position_Value[0];
        dif_qc2 = Real_Position_Value[1] - Origin_qc2;
        //Origin_qc2= Real_Position_Value[1];
        dif_qc3 = Real_Position_Value[2] - Origin_qc3;
        //	Origin_qc3= Real_Position_Value[2];
//得到真实角度差
        dif_angle1 = dif_qc1 * 0.18;
        dif_angle2 = dif_qc2 * 0.18;
        dif_angle3 = dif_qc3 * 0.18;
//计算真实角度
        real_angle1 = dif_angle1;
        real_angle2 = dif_angle2;
        real_angle3 = dif_angle3;
        delta_calcForward(real_angle1 / 13.3 + 31.4, real_angle2 / 13.3 + 31.4, real_angle3 / 13.3 + 31.4);
        DATE();
        printf("%010d\n", str);
//        for(len=0; len<5; len++)
//        {
//            printf("%010d\n",str[len]);
//            //USART_SendData(USART1,str[len]);//向串口1发送数据，截取整数位
//            //while(USART_GetFlagStatus(USART1,USART_FLAG_TC)!=SET);//等待发送结束
//            HAL_Delay(20);
//        }
    }
}
void pattern()
{
    if( mode == 1) //默认为测试模式，用串口查看数值，调试阶段
    {
        // printf("-------------------重力补偿模式！------------------\n");
//            CAN_RoboModule_DRV_Current_Position_Mode(0,1,gravity1,rst_qc1+4000);
//            CAN_RoboModule_DRV_Current_Position_Mode(0,2,gravity2,rst_qc2+4000);
//            CAN_RoboModule_DRV_Current_Position_Mode(0,3,gravity3,rst_qc3+4000);
        CAN_RoboModule_DRV_Current_Position_Mode(0, 1, gravity1 + 200, Origin_qc1 + 4000);
        CAN_RoboModule_DRV_Current_Position_Mode(0, 2, gravity2 + 200, Origin_qc2 + 4000);
        CAN_RoboModule_DRV_Current_Position_Mode(0, 3, gravity3 + 200, Origin_qc3 + 4000);
//				BASIC_TIM_Init();		//定时器中断初始化，中断内是重力补偿和位置锁定控制代码，在驱动器配置完成之后再开启
//        printf("-转动qc值-  一号：%ld(qc)    二号：%ld(qc)    三号：%ld(qc)\n", dif_qc1, dif_qc2, dif_qc3);
//        printf("-真实角度-  一号：%ld(angle) 二号：%ld(angle) 三号：%ld(angle)\n", real_angle1, real_angle2, real_angle3);
//        printf("-转动速度-  一号：%d(rpm)    二号：%d(rpm)    三号：%d(rpm)\n", Real_Velocity_Value[0], Real_Velocity_Value[1], Real_Velocity_Value[2]);
//        printf("-结算位置-  中心点：x=%f (cm) y=%f (cm) z=%f (cm)\n", (PM.x0+X)/10,( PM.y0+Y)/10, (-PM.z0+Z)/10);
//        printf("-平衡电流-  一号：%d  二号=%d  三号=%d \n", gravity1, gravity2, gravity3);

    }

    if( mode == 2)//暂停
    {
        CAN_RoboModule_DRV_Current_Position_Mode(0, 1, 2000, angle1);
        CAN_RoboModule_DRV_Current_Position_Mode(0, 2, 2000, angle2);
        CAN_RoboModule_DRV_Current_Position_Mode(0, 3, 2000, angle3);//Real_Position_Value[0]

        /******************上面的位置模式************************/
//        WeiZhi_Contrl(4, 0x00, 100, angle_4);
//			HAL_Delay(2);
//        WeiZhi_Contrl(5, 0x00, 100, angle_5);
//			HAL_Delay(2);
//        WeiZhi_Contrl(6, 0x00, 100, angle_6);
//			HAL_Delay(2);

//			CAN_RoboModule_DRV_Current_Position_Mode(0, 1, 5000, Real_Position_Value[0]);
//			CAN_RoboModule_DRV_Current_Position_Mode(0, 2, 5000, Real_Position_Value[1]);
//			CAN_RoboModule_DRV_Current_Position_Mode(0, 3, 5000, Real_Position_Value[2]);
    }

    if( mode == 3)//位置复位
    {

        CAN_RoboModule_DRV_Current_Position_Mode(0, 1, 4000, Origin_qc1);
        CAN_RoboModule_DRV_Current_Position_Mode(0, 2, 4000, Origin_qc2);
        CAN_RoboModule_DRV_Current_Position_Mode(0, 3, 4000, Origin_qc3);

        /*****************上面的位置模式*************************/
//        WeiZhi_Contrl(4, 0x00, 100, Origin_qc4);
//			HAL_Delay(2);
//        WeiZhi_Contrl(5, 0x00, 100, Origin_qc5);
//			HAL_Delay(2);
//        WeiZhi_Contrl(6, 0x00, 100, Origin_qc6);
//			HAL_Delay(2);

    }
//        if(flag == 2 && status == 1)  //按key_0切换为运行模式，将数值传至上位机，运行阶段
//        {
//            printf("-------------------跟随模式！------------------\n");
//					run();
//            delta_calcInverse(man[0],man[1],-man[2]);//运动学逆解
//            CAN_RoboModule_DRV_Current_Position_Mode(0,1, 3000, (PN.theta1-31.4)*13.3/0.18);
//            CAN_RoboModule_DRV_Current_Position_Mode(0,2, 3000, (PN.theta2-31.4)*13.3/0.18);
//            CAN_RoboModule_DRV_Current_Position_Mode(0,3, 3000, (PN.theta3-31.4)*13.3/0.18);
//            printf("-转动qc值-   一号：%ld(qc)    二号：%ld(qc)    三号：%ld(qc)\n", dif_qc1, dif_qc2, dif_qc3);
//            printf("-真实角度-   一号：%ld(angle) 二号：%ld(angle) 三号：%ld(angle)\n", real_angle1, real_angle2, real_angle3);
//            printf("-转动速度-   一号：%d(rpm)    二号：%d(rpm)    三号：%d(rpm)\n", Real_Velocity_Value[0], Real_Velocity_Value[1], Real_Velocity_Value[2]);
//            printf("-结算位置-   中心点：x=%f (cm) y=%f (cm) z=%f (cm)\n", (PM.x0+X)/10, (PM.y0+Y)/10, (-PM.z0+Z)/10);
//            HAL_Delay(1000);
//            fl=fl+20;
//					run();
//					DATE();
//					for(len = 0; len < 5; len++)
//					{
//						printf("%010d\n", str[len]);
//						//USART_SendData(USART1,str[len]);//向串口1发送数据，截取整数位
//						//while(USART_GetFlagStatus(USART1,USART_FLAG_TC)!=SET);//等待发送结束
//						delay_ms(20);
//					}
//        }
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
    /* USER CODE BEGIN 6 */
    /* User can add his own implementation to report the file name and line number,
       tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
